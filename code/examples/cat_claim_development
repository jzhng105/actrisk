import os
import pandas as pd
import numpy as np
from core.actsimulator import StochasticSimulator
from actstats import fraction_to_date_full
from actstats import actuarial as act

cat_claim_file = r'C:\Users\jzhng\Modelling\catastrophe model\outputs\properties_at_risk_loss.parquet'

df_with_dates = pd.read_parquet(cat_claim_file)
df_with_dates.head(100).to_csv('outputs/cat_claim_sample.csv', index=False)

claim_data = df_with_dates.copy()
claim_data = claim_data.rename(columns={'incurred_d':'incurred_date', 'gross_loss': 'ultimate_loss'})
claim_data = claim_data[claim_data['incurred_date']!='0']

# Convert to DataFrame with datetime64[ms] to prevent overflow
claim_data['incurred_date'] = claim_data['incurred_date'].astype('datetime64[s]')
# Example LDFs (age-to-age factors)
base_LDFs = {0: 2, 3: 1.5, 6: 1.2, 9: 1.1, 12: 1.05, 15: 1.02, 18: 1.00}
volatility = 0.1  # Volatility factor for LDFs
cumulative_factor = 1.0  # Ultimate claims are fully developed

def generate_unique_LDFs(base_LDFs, volatility):
    return {dev: ldf * np.random.normal(1, volatility) for dev, ldf in base_LDFs.items()}

# Compute CDFs by multiplying future LDFs
def compute_cdf(base_LDFs, cumulative_factor=1.0):
    cdf = {}
    sorted_keys = sorted(base_LDFs.keys(), reverse=True)  # Start from the highest development period

    for dev in sorted_keys:
        cumulative_factor *= base_LDFs[dev]  # Multiply each LDF moving backward
        cdf[dev] = cumulative_factor  # Store the cumulative factor
    return cdf

development_data = []

for _, claim in claim_data.iterrows():  # Iterating over DataFrame rows
    ultimate_loss = claim['ultimate_loss']
    incurred_date = pd.to_datetime(claim['incurred_date'])  # Ensure it's a datetime object
    accident_year = incurred_date.year

    # Generate unique LDFs for this claim
    unique_LDFs = generate_unique_LDFs(base_LDFs, volatility)
    cdf = compute_cdf(unique_LDFs, cumulative_factor)  # Compute CDFs using the unique LDFs

    for dev_months, cdf_factor in cdf.items():
        reported_loss = ultimate_loss / cdf_factor  # Divide instead of multiply
        dev_date = incurred_date + pd.DateOffset(months=dev_months)  # Add months properly
        development_data.append({
            'accident_year': accident_year,
            'incurred_date': claim['incurred_date'],
            'claim_id': claim['event_id'],
            'development_month': dev_months,
            'incurred_loss': reported_loss,
            'development_date': dev_date
        })

claim_development = pd.DataFrame(development_data)
claim_development = claim_development[claim_development['accident_year'] < 2200]

claim_development.to_csv('outputs/cat_claim_development.csv', index=False)
claim_development = pd.read_csv('outputs/cat_claim_development.csv')